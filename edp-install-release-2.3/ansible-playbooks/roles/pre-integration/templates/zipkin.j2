# Copyright 2018 EPAM Systems.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Template
metadata:
  name: zipkin
  annotations:
    iconClass: icon-zipkin
    description: Openshift template for Zipkin service
    openshift.io/provider-display-name: EDP
    openshift.io/support-url: https://www.epam.com
    tags: edp
objects:
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: "${SERVICE_NAME}-data"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${STORAGE_CAPACITY}
    storageClassName: ${STORAGE_CLASS}
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      description: "Route for ${SERVICE_NAME} service."
    name: ${SERVICE_NAME}
    labels:
      app: ${SERVICE_NAME}
  spec:
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: ${SERVICE_NAME}
    port:
      targetPort: gui
- apiVersion: v1
  kind: Service
  metadata:
    name: ${SERVICE_NAME}
    labels:
      app: ${SERVICE_NAME}
  spec:
    ports:
    - name: gui
      port: 9411
    selector:
      app: ${SERVICE_NAME}
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    name: "${SERVICE_NAME}-db"
    labels:
      app: "${SERVICE_NAME}-db"
  spec:
    ports:
    - name: "${SERVICE_NAME}-db"
      port: 9042
    selector:
      app: "${SERVICE_NAME}-db"
    type: ClusterIP
    sessionAffinity: None
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: ${SERVICE_NAME}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${SERVICE_NAME}
    labels:
      app: ${SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      app: ${SERVICE_NAME}
    strategy:
      activeDeadlineSeconds: 21600
      type: Rolling
      rollingParams:
        failurePolicy: Abort
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
    template:
      metadata:
        labels:
          app: ${SERVICE_NAME}
      spec:
        serviceAccountName: ${SERVICE_NAME}
        containers:
        - name: ${SERVICE_NAME}
          image: "${SERVICE_IMAGE}:${SERVICE_VERSION}"
          imagePullPolicy: Always
          ports:
            - name: gui
              containerPort: 9411
          env:
          - name: STORAGE_TYPE
            value: "cassandra"
          - name: CASSANDRA_ENSURE_SCHEMA
            value: "false"
          - name: CASSANDRA_CONTACT_POINTS
            value: "${SERVICE_NAME}-db"
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 180
            periodSeconds: 20
            successThreshold: 1
            tcpSocket:
              port: 9411
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 60
            periodSeconds: 20
            successThreshold: 1
            tcpSocket:
              port: 9411
            timeoutSeconds: 5
          resources:
            requests:
              memory: 500Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
      - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${SERVICE_NAME}
    name: "${SERVICE_NAME}-db"
  spec:
    replicas: 1
    selector:
      app: "${SERVICE_NAME}-db"
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: "${SERVICE_NAME}-db"
      spec:
        securityContext:
          fsGroup: 0
        containers:
        - name: "${SERVICE_NAME}-db"
          image: "openzipkin/zipkin-cassandra:${SERVICE_VERSION}"
          imagePullPolicy: Always
          resources:
            requests:
              memory: 500Mi
          ports:
            - containerPort: 9042
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 9042
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - '-c'
                - cd /cassandra/bin && ./cassandra -v
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          volumeMounts:
            - mountPath: /cassandra/data/
              name: ${SERVICE_NAME}-db
        serviceAccount: ${SERVICE_NAME}
        volumes:
        - name: ${SERVICE_NAME}-db
          persistentVolumeClaim:
            claimName: ${SERVICE_NAME}-data
parameters:
- displayName: Service name
  name: SERVICE_NAME
  required: true
  value: "zipkin"
- displayName: Application version
  name: SERVICE_VERSION
  required: true
  value: "2.6.0"
- displayName: Application image
  name: SERVICE_IMAGE
  value: "openzipkin/zipkin"
  required: true
- displayName: Zipkin storage class
  name: STORAGE_CLASS
  required: true
  value: "{{ storage_class_name }}"
- displayName: Zipkin storage capacity
  name: STORAGE_CAPACITY
  required: true
  value: "1Gi"